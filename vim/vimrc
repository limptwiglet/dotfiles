" NeoBundle
if has('vim_starting')
	if &compatible
		set nocompatible               " Be iMproved
	endif

	" Required:
	set runtimepath+=~/.vim/bundle/neobundle.vim/
endif


call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" Load and check bundles
source ~/.vim/bundles
NeoBundleCheck
" /NeoBundle
call neobundle#end()

" General
filetype plugin indent on
syntax on
set t_Co=256
syntax enable

" Key bindings
let mapleader = ","																		" Remap leader key

" Theme
set background=dark
colorscheme solarized
let g:solarized_termtrans = 1
let g:solarized_visibility="high"
let g:solarized_termcolors=256
set guifont=Inconsolata-dz\ for\ Powerline:h12

" UI
set cursorline
set number
set laststatus=2																			" Always show status line
hi CursorLineNR ctermfg=red
set scrolloff=8
set linespace=0
set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set showcmd

highlight clear SignColumn 														" SignColumn should match background
highlight clear LineNr

set noswapfile 																				" Disabled swap file


" Formatting
set shiftwidth=2
set tabstop=2

" Search
set incsearch
set hlsearch
set showmatch
set ignorecase
set smartcase
set splitright
set splitbelow

set history=1000
set hidden
set ttyfast
set lazyredraw

set backspace=indent,eol,start

set wildmenu
set wildmode=list:longest,full

" Highlight problem whitespace
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.


" Key bindings
imap jj <Esc>

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv


" Change cursor shape in insert mode
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

" Vimux
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vr :VimuxRunLastCommand<CR>

" NERDTree
let NERDTreeIgnore = ['Session\.vim$']

" UndoTree
function ShowUndoTree()
	:UndotreeToggle
	:UndotreeFocus
endfunction
map <Leader>ut exec ShowUndoTree<CR>

" Plugins
source ~/.vim/plugins.vim


" Snippets
let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" Buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

nnoremap <left> :bprev<CR>
nnoremap <right> :bnext<CR>


function! CloseWindowOrKillBuffer() "{{{
	let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

	" never bdelete a nerd tree
	if matchstr(expand("%"), 'NERD') == 'NERD'
		wincmd c
		return
	endif

	if number_of_windows_to_this_buffer > 1
		wincmd c
	else
		bdelete
	endif
endfunction

" Window killer
nnoremap <silent> Q :call CloseWindowOrKillBuffer()<cr>

noremap <leader>vs :VimShell<CR>


" Unite
let g:unite_data_directory = $HOME.'/tmp/vim/unite/'
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
let g:unite_source_rec_async_command = 'ag --nocolor --nogroup --hidden -g ""'
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden'
let g:unite_source_grep_recursive_opt=''

nnoremap <space>s :Unite -quick-match buffer<cr>
nnoremap <space>/ :Unite grep:.<cr>
